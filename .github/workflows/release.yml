name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: macos-14
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Verify Swift installation
      run: |
        swift --version
        SWIFT_VERSION=$(swift --version | head -n1 | grep -oE '[0-9]+\.[0-9]+' | head -n1)
        MAJOR_VERSION=$(echo $SWIFT_VERSION | cut -d. -f1)
        echo "Current Swift version: $SWIFT_VERSION (major: $MAJOR_VERSION)"
        
        if [ "$MAJOR_VERSION" -lt 6 ]; then
          echo "Swift 6+ required but found Swift $SWIFT_VERSION"
          echo "Installing Swift 6 toolchain..."
          
          # Download Swift 6.0.2 toolchain
          SWIFT_URL="https://download.swift.org/swift-6.0.2-release/xcode/swift-6.0.2-RELEASE-osx.pkg"
          echo "Downloading from: $SWIFT_URL"
          curl -L -o swift-toolchain.pkg "$SWIFT_URL"
          
          # Verify download
          if [ ! -f swift-toolchain.pkg ]; then
            echo "Download failed, trying alternative method..."
            # Try development snapshot instead
            SWIFT_DEV_URL="https://download.swift.org/development/xcode/swift-DEVELOPMENT-SNAPSHOT-2024-11-26-a-osx.pkg"
            curl -L -o swift-toolchain.pkg "$SWIFT_DEV_URL"
          fi
          
          # Install toolchain
          sudo installer -pkg swift-toolchain.pkg -target /
          
          # Update PATH to use new Swift
          export PATH="/Library/Developer/Toolchains/swift-latest.xctoolchain/usr/bin:$PATH"
          echo "/Library/Developer/Toolchains/swift-latest.xctoolchain/usr/bin" >> $GITHUB_PATH
          
          # Verify new installation
          swift --version
          
          # Clean up
          rm swift-toolchain.pkg
        else
          echo "Swift $SWIFT_VERSION meets requirements (6+)"
        fi
      
    - name: Generate version number
      id: version
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          # Use tag version if it's a tag push
          VERSION=${GITHUB_REF#refs/tags/}
        else
          # Generate date-based version for main branch pushes
          VERSION=$(date +'%Y.%m.%d')
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Generated version: $VERSION"
      
    - name: Build binary
      run: |
        swift build -c release
        
    - name: Set up signing certificate
      if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main') && vars.SIGNING_CERTIFICATE != '' && vars.SIGNING_CERTIFICATE_PASSWORD != ''
      env:
        SIGNING_CERTIFICATE: ${{ secrets.SIGNING_CERTIFICATE }}
        SIGNING_CERTIFICATE_PASSWORD: ${{ secrets.SIGNING_CERTIFICATE_PASSWORD }}
      run: |
        # Create temporary keychain
        security create-keychain -p "temp_password" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "temp_password" build.keychain
        
        # Import signing certificate
        echo "$SIGNING_CERTIFICATE" | base64 --decode > certificate.p12
        security import certificate.p12 -k build.keychain -P "$SIGNING_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple: -s -k "temp_password" build.keychain
        
        # Clean up
        rm certificate.p12
        
    - name: Sign binary
      if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main') && vars.APPLE_TEAM_ID != ''
      env:
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        codesign --force --sign "Developer ID Application: Your Name ($APPLE_TEAM_ID)" .build/release/asbmutil
        codesign --verify --verbose .build/release/asbmutil
        
    - name: Notarize binary
      if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main') && vars.APPLE_KEY_ID != '' && vars.APPLE_ISSUER_ID != '' && vars.APPLE_KEY_CONTENT != ''
      env:
        APPLE_KEY_ID: ${{ secrets.APPLE_KEY_ID }}
        APPLE_ISSUER_ID: ${{ secrets.APPLE_ISSUER_ID }}
        APPLE_KEY_CONTENT: ${{ secrets.APPLE_KEY_CONTENT }}
      run: |
        # Create API key file
        echo "$APPLE_KEY_CONTENT" | base64 --decode > AuthKey_$APPLE_KEY_ID.p8
        
        # Create zip for notarization
        zip asbmutil.zip .build/release/asbmutil
        
        # Submit for notarization
        xcrun notarytool submit asbmutil.zip \
          --key AuthKey_$APPLE_KEY_ID.p8 \
          --key-id $APPLE_KEY_ID \
          --issuer $APPLE_ISSUER_ID \
          --wait
          
        # Staple notarization ticket
        xcrun stapler staple .build/release/asbmutil
        
        # Clean up
        rm AuthKey_$APPLE_KEY_ID.p8

    - name: Log build status
      if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main')
      run: |
        if [ "${{ secrets.SIGNING_CERTIFICATE }}" != "" ]; then
          echo "✅ Binary has been signed and notarized"
        else
          echo "⚠️  Binary is unsigned (no signing certificate provided)"
        fi
        
    - name: Create release zip
      if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main')
      run: |
        zip -j asbmutil-${{ steps.version.outputs.version }}.zip .build/release/asbmutil
        
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: asbmutil-${{ steps.version.outputs.version }}
        path: .build/release/asbmutil
        
    - name: Create Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        files: asbmutil-${{ steps.version.outputs.version }}.zip
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create Tagged Release
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: asbmutil-${{ steps.version.outputs.version }}.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Clean up keychain
      if: always()
      run: |
        security delete-keychain build.keychain || true
