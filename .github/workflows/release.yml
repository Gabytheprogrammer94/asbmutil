name: Build

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: macos-14
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Verify Swift installation
      run: |
        swift --version
        SWIFT_VERSION=$(swift --version | head -n1 | grep -oE '[0-9]+\.[0-9]+(\.[0-9]+)?' | head -n1)
        MAJOR_VERSION=$(echo $SWIFT_VERSION | cut -d. -f1)
        echo "Current Swift version: $SWIFT_VERSION (major: $MAJOR_VERSION)"
        
        if [ "$MAJOR_VERSION" -lt 6 ]; then
          echo "Swift 6+ required but found Swift $SWIFT_VERSION"
          echo "Installing Swift 6 toolchain using swiftly..."
          
          # Install swiftly
          curl -O https://download.swift.org/swiftly/darwin/swiftly.pkg
          installer -pkg swiftly.pkg -target CurrentUserHomeDirectory
          
          # Initialize swiftly - this will install the latest Swift 6
          ~/.swiftly/bin/swiftly init --quiet-shell-followup
          
          # Source the environment and update PATH
          . "${SWIFTLY_HOME_DIR:-$HOME/.swiftly}/env.sh"
          echo "$HOME/.swiftly/bin" >> $GITHUB_PATH
          hash -r
          
          # Verify installation
          swift --version
          
          # Clean up
          rm swiftly.pkg
        else
          echo "Swift $SWIFT_VERSION meets requirements (6+)"
        fi
        
    - name: Build binary
      run: |
        swift build -c release
        
    - name: Verify binary
      run: |
        ls -la .build/release/asbmutil
        .build/release/asbmutil --help
        
    - name: Generate version number
      id: version
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=$(date +'%Y.%m.%d')-$(echo ${{ github.sha }} | cut -c1-7)
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Generated version: $VERSION"
        
    - name: Check and create daily tag
      id: daily_tag
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        DAILY_TAG=$(date +'%Y.%m.%d')
        echo "daily_tag=$DAILY_TAG" >> $GITHUB_OUTPUT
        
        # Check if tag already exists
        if git tag -l "$DAILY_TAG" | grep -q "$DAILY_TAG"; then
          echo "Tag $DAILY_TAG already exists, skipping"
          echo "should_release=false" >> $GITHUB_OUTPUT
        else
          echo "Creating new tag $DAILY_TAG"
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag "$DAILY_TAG"
          git push origin "$DAILY_TAG"
          echo "should_release=true" >> $GITHUB_OUTPUT
        fi
        
    - name: Set release version
      id: release_version
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        elif [[ "${{ steps.daily_tag.outputs.daily_tag }}" != "" ]]; then
          VERSION=${{ steps.daily_tag.outputs.daily_tag }}
        else
          VERSION=${{ steps.version.outputs.version }}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION"
        
    - name: Create release zip
      run: |
        zip -j asbmutil-${{ steps.release_version.outputs.version }}.zip .build/release/asbmutil
        
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: asbmutil-${{ steps.release_version.outputs.version }}
        path: |
          .build/release/asbmutil
          asbmutil-${{ steps.release_version.outputs.version }}.zip
        
    - name: Create Release
      if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/') || (github.ref == 'refs/heads/main' && steps.daily_tag.outputs.should_release == 'true'))
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || steps.daily_tag.outputs.daily_tag }}
        files: asbmutil-${{ steps.release_version.outputs.version }}.zip
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}